# -*- coding: utf-8 -*-
"""Spotify Prediction.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1OaFltfNmaHE3uP2pBKhp2BOkjUFc6cYv
"""

import pandas as pd

df = pd.read_csv("/content/spotify_millsongdata.csv")

df.head()

df.tail()

df.shape

df.isnull().sum()

df =df.sample(5000).drop('link',axis =1).reset_index(drop=True)

df.head(5)

df['text'][0]

df.shape

"""### Text Cleaning"""

df['text'] = df['text'].str.lower().replace(r'^\w\s',' ').replace(r'\n',' ',regex=True)

df.tail(5)

import nltk
from nltk.stem.porter import PorterStemmer
stemmer = PorterStemmer()

def token(txt):
  token = nltk.word_tokenize(txt)
  a =[stemmer.stem(w) for w in token]
  return " ".join(a)

nltk.download('punkt')

token("you are beautiful, beauty")

df['text'].apply(lambda x:token(x))

from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics.pairwise import cosine_similarity

tfid =TfidfVectorizer(analyzer='word',stop_words='english')

matrix = tfid.fit_transform(df['text'])

cosine_similarity(matrix)

similer = cosine_similarity(matrix)

similer[0]

"""### Recommender Function"""

def recommender(song_name):
  idx = df[df['song'] == song_name].index[0]
  distance = sorted(list(enumerate(similer[idx])),reverse=True,key=lambda x:x[1])
  song = []

  for s_id in distance[1:5]:
    song.append(df.iloc[s_id[0]].song)
  return song

recommender('Cartwheels')

import pickle

pickle.dump(similer,open('similarity','wb'))

pickle.dump(similer,open('df','wb'))

